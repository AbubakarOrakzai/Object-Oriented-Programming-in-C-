Copy constructor

Deep copy constructor


/*
In this code as the all member of the class is public so we do not need to make any special function to access it.
The code will hepl us to change the value of the copy object and it will not reflect in the first object from which 
copy the object. This is happen by using the concept of the deep copy
*/
#include<iostream>
using namespace std;
class student 
{
    public:
    string name;
    int roll;
    int *ptr;
    student(string a, int b, int p)
    {
        name=a;
        roll=b;
        ptr = new int;
        *ptr=p;
    }
    student(student &old)
    {
        name=old.name;
        roll=old.roll;
        *ptr=*(old.ptr);
    }
    void display()
    {
        cout<<"The name of the student is: "<<name<<endl;
        cout<<"The roll number of the student is: "<<roll<<endl;
        cout<<"The ptr is: "<<*ptr<<endl;
    }
};
int main()
{
    student s1("neha",1,100);
    student s2(s1);
    *(s2.ptr)=200;
    s1.display();
    s2.display();
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Deep copy

#include<iostream>                                          By making deep copy we can now make the copy of the object and then make changeses in the object and 
using namespace std;                                        the changes is will not reflect in the firt object 

class Myclass {
    private:
        int *data;
    public:
        // Constructor
        Myclass(int x) {
            data = new int;                                      Here we allocate dynamic memeroy to the data
            *data = x;
        }

        // Copy Constructor (Deep Copy)
        Myclass(const Myclass &sample) {
            data = new int;
            *data = *(sample.data);
        }

        // Destructor
        ~Myclass() {
            delete data;
        }

        // Method to display the value
        void display() const {
            cout << "Value: " << *data << endl;
        }

        // Method to set the value
        void setValue(int value) {
            *data = value;
        }
};

int main() {
    Myclass obj1(10);
    Myclass obj2 = obj1; // Calls the copy constructor

    obj1.display();
    obj2.display();

    // Setting new value for obj2
    obj2.setValue(20);

    cout << "The value after changing:" << endl;
    obj1.display();
    obj2.display();

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

